class Solution {
public:
        int pivot (vector<int>& nums){
        int start = 0, end = nums.size() -1, mid;
            if(start == end){
                return start;
            }
        while (start <= end ){
            mid = start + (end - start )/2;
            if(mid < end && nums[mid] > nums[mid+1]){
                return mid;
            }
            if(mid > start && nums[mid] < nums[mid-1]){
                return mid -1;
            }
            if( nums[start] == nums[mid] && nums[end] == nums[mid]){
                if( nums[start] > nums[start +1]){
                    return start;
                }
                start ++;
                if(nums[end-1] > nums[end]){
                    return end -1;
                }
                end--;
            }
            else if((nums[start] > nums[mid]) || ((nums[start] == nums[mid]) &&( nums[mid] > nums[end]) ) ){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
       }
        return -1;
    }
    int binarySearch(vector<int>& nums,int start, int end, int target){
    while(start <= end){
        int mid = start + (end - start)/2;
        if(target < nums[mid]){
            end = mid-1;
        }        
        else if (target > nums[mid]){
            start = mid+1;
        }
        else{
            return true;
        }
     }
     return false;
    
}
    bool search(vector<int>& nums, int target) {
        int start=0, end = nums.size() -1;
        int pivot_ = pivot(nums);
        if(pivot_ == -1){
            return binarySearch(nums,start, end , target);
        }
        if(nums[pivot_] == target){
            return true;
        }
        
        if(target >= nums[start]){
            return binarySearch(nums,start , pivot_-1, target );
        }
        else{
            return binarySearch(nums, pivot_+1, end, target);
        }
        
        return false;
    }
};